---
import type { ui } from '@/i18n/ui'
import { useTranslatedPath, useTranslations } from '@/i18n/utils'
import LanguajePicker from './LanguajePicker.astro'
import ThemeToggle from './ThemeToggle.astro'

const currentLocale = Astro.currentLocale as keyof typeof ui
const t = useTranslations(currentLocale)
const translatePath = useTranslatedPath(currentLocale)

const navItems = [
  {
    title: t('nav.experience'),
    label: 'experiencia',
    url: translatePath('/#experiencia', currentLocale),
  },
  {
    title: t('nav.projects'),
    label: 'proyectos',
    url: translatePath('/#proyectos', currentLocale),
  },
  {
    title: t('nav.about'),
    label: 'sobre-mi',
    url: translatePath('/#sobre-mi', currentLocale),
  },
  {
    title: t('nav.contact'),
    label: 'contacto',
    url: 'mailto:alexcalle.paola@gmail.com',
  },
]
---

<header
  class='fixed top-8 z-50 flex items-center justify-center w-full mx-auto mt-0'
>
  <nav
    class='flex px-3 text-sm font-medium gap-3 rounded-full text-gray-600 dark:text-gray-200 justify-center items-center min-h-9'
  >
    {
      navItems.map(link => (
        <a
          nav-item-link
          class='relative px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400 hidden md:block'
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
    <LanguajePicker />
  </nav>
</header>

<script>
  const sections = document.querySelectorAll(
    'section[data-observable]'
  ) as NodeListOf<HTMLElement>
  const navItems = document.querySelectorAll(
    'header nav a[nav-item-link]'
  ) as NodeListOf<HTMLElement>

  const callback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach(entry => {
      if (!entry.isIntersecting) return

      navItems.forEach(item => {
        const isActive = item.getAttribute('aria-label') == entry.target.id
        item.setAttribute('data-active', isActive.toString())
      })
    })
  }

  const observer = new IntersectionObserver(callback, {
    root: null,
    rootMargin: '0px',
    threshold: 0.5,
  })

  sections.forEach(section => observer.observe(section))
</script>

<style is:global>
  header {
    animation: header-fixed 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 300px;
  }

  @keyframes header-fixed {
    to {
      top: 0.25rem;
    }
  }

  header nav {
    --nav-bg: rgb(255 255 255 / 0.7);
    --shadow-lg: 0 10px 15px -3px rgba(4, 3, 3, 0.1),
      0 4px 6px -4px rgb(0 0 0 / 0.1);
    --blur-md: 10px;
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 200px;
    will-change: backdrop-filter, box-shadow, background-color;
  }

  @keyframes nav-shadown {
    to {
      box-shadow: var(--shadow-lg);
      backdrop-filter: blur(var(--blur-md)) saturate(5);
      background-color: var(--nav-bg);
      gap: 0;
    }
  }

  .dark header nav {
    --nav-bg: rgb(31 41 55 / 0.8);
  }

  header nav a[nav-item-link][data-active='true'] {
    color: var(--color-yellow-500);
    display: block;
  }
</style>
